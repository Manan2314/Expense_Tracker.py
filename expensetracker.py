# -*- coding: utf-8 -*-
"""Expensetracker.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V7gkMJVblcoM1uqSUs1DlQKbqGRgdIYY
"""

import streamlit as st
import csv
import os
from datetime import datetime, date
import matplotlib.pyplot as plt
from collections import defaultdict

# Ensure required files exist
if not os.path.exists("users.csv"):
    with open("users.csv", "w", newline='') as file:
        writer = csv.writer(file)
        writer.writerow(["Name", "Mobile", "Email"])

if not os.path.exists("expenses.csv"):
    with open("expenses.csv", "w", newline='') as file:
        writer = csv.writer(file)
        writer.writerow(["Date", "Email", "Amount", "Category"])

if not os.path.exists("budget.csv"):
    with open("budget.csv", "w", newline='') as file:
        writer = csv.writer(file)
        writer.writerow(["Email", "MonthlyIncome", "SavingsGoal", "SpendingLimit"])

# ------------------ Functions ------------------ #

def register_or_login():
    st.header("Welcome to ExpenseTracker 💸")
    user_type = st.radio("Are you a new or existing user?", ("New User", "Existing User"))

    if user_type == "New User":
        name = st.text_input("Enter your name")
        mobile = st.text_input("Enter your mobile number")
        email = st.text_input("Enter your email").lower()

        if st.button("Register"):
            with open("users.csv", "a", newline='') as file:
                writer = csv.writer(file)
                writer.writerow([name, mobile, email])
            st.success(f"Welcome, {name}! You are now registered.")
            return name, email

    else:
        email = st.text_input("Enter your registered email").lower()
        if st.button("Login"):
            with open("users.csv", "r") as file:
                reader = csv.reader(file)
                for row in reader:
                    if row[2].strip().lower() == email:
                        st.success(f"Welcome back, {row[0]}!")
                        return row[0], email
            st.error("User not found. Please check your email.")

    return None, None

def add_expense(email):
    st.subheader("➕ Add New Expense")
    categories = ["Food", "Shopping", "Personal Care", "Groceries", "Health Care", "Miscellaneous"]
    category = st.selectbox("Select Category", categories)
    amount = st.number_input("Amount spent (₹)", min_value=0, step=1)
    if st.button("Save Expense"):
        today = date.today()
        with open("expenses.csv", "a", newline='') as file:
            writer = csv.writer(file)
            writer.writerow([today, email, amount, category])
        st.success(f"Expense of ₹{amount} on {category} saved!")

def view_expenses(email):
    st.subheader("📄 Your Expenses")
    total, count = 0, 0
    table_data = []

    with open("expenses.csv", "r") as file:
        reader = csv.reader(file)
        next(reader)  # skip header
        for row in reader:
            if row[1] == email:
                table_data.append([row[0], row[3], row[2]])
                total += int(row[2])
                count += 1

    if table_data:
        st.table(table_data)
        st.info(f"Total Entries: {count} | Total Spent: ₹{total}")
    else:
        st.warning("No expenses recorded yet.")

def set_budget(email):
    st.subheader("💰 Set Monthly Budget")
    monthly_income = st.number_input("Enter your monthly income (₹)", min_value=0)
    savings_goal = st.number_input("Enter your savings goal (₹)", min_value=0)

    if st.button("Set Budget"):
        if savings_goal > monthly_income:
            st.error("Savings cannot exceed income.")
            return
        spending_limit = monthly_income - savings_goal
        with open("budget.csv", "a", newline='') as file:
            writer = csv.writer(file)
            writer.writerow([email, monthly_income, savings_goal, spending_limit])
        st.success(f"Budget set! You can spend up to ₹{spending_limit} this month.")

def overspending_alerts(email):
    st.subheader("📊 Budget Tracker")
    try:
        # get latest budget for user
        with open("budget.csv", "r") as file:
            reader = csv.reader(file)
            rows = [row for row in reader if row[0] == email]
            if not rows:
                st.warning("No budget set. Please set a budget first.")
                return
            latest = rows[-1]
            income, goal, limit = int(latest[1]), int(latest[2]), int(latest[3])

        # calculate spending this month
        total_spent = 0
        now = datetime.now()
        with open("expenses.csv", "r") as file:
            reader = csv.reader(file)
            next(reader)
            for row in reader:
                if row[1] == email:
                    entry_date = datetime.strptime(row[0], "%Y-%m-%d").date()
                    if entry_date.month == now.month and entry_date.year == now.year:
                        total_spent += int(row[2])

        percent_used = (total_spent / limit) * 100
        st.write(f"Total spent this month: ₹{total_spent}")
        st.write(f"Budget usage: **{percent_used:.2f}%**")

        if percent_used >= 100:
            st.error("🚨 You've exceeded your budget!")
        elif percent_used >= 80:
            st.warning("⚠️ You're close to your limit.")
        elif percent_used >= 50:
            st.info("🔔 You've used over 50% of your budget.")
        else:
            st.success("✅ You're within budget!")

    except Exception as e:
        st.error(f"Error: {e}")

def summary_pie_chart(email):
    st.subheader("📈 Monthly Category-wise Summary")
    category_totals = defaultdict(int)
    now = datetime.now()

    with open("expenses.csv", "r") as file:
        reader = csv.reader(file)
        next(reader)
        for row in reader:
            if row[1] == email:
                entry_date = datetime.strptime(row[0], "%Y-%m-%d").date()
                if entry_date.month == now.month and entry_date.year == now.year:
                    amount = int(row[2])
                    category = row[3]
                    category_totals[category] += amount

    if category_totals:
        labels = list(category_totals.keys())
        values = list(category_totals.values())
        fig, ax = plt.subplots()
        ax.pie(values, labels=labels, autopct='%1.1f%%', startangle=90)
        ax.axis('equal')
        st.pyplot(fig)
    else:
        st.warning("No expenses found for this month.")

# ------------------ Main App ------------------ #

def main():
    st.set_page_config(page_title="Expense Tracker", layout="centered")
    name, email = register_or_login()
    if not email:
        st.stop()

    st.sidebar.title("📌 Navigation")
    option = st.sidebar.radio("Choose an action:", (
        "Add Expense",
        "View Expenses",
        "Set Budget",
        "Budget Alerts",
        "View Summary"
    ))

    if option == "Add Expense":
        add_expense(email)
    elif option == "View Expenses":
        view_expenses(email)
    elif option == "Set Budget":
        set_budget(email)
    elif option == "Budget Alerts":
        overspending_alerts(email)
    elif option == "View Summary":
        summary_pie_chart(email)

if __name__ == "__main__":
    main()